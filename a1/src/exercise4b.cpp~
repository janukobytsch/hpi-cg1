// ======================================
// 3D Computergrafik
// moodle.hpi3d.de
// ======================================
//
// Sommersemester 2015 - Aufgabenblatt 1
//                     - Aufgabe 4b
//
//
//
// ======================================

#include "exercise4b.h"
#include "stable.h"

//
// std
//
#include <math.h>
#include <complex>

//
// Qt
//
#include <QGraphicsPixmapItem>
#include <QGraphicsRectItem>
#include <QTimer>
#include <QPainter>

using namespace Qt;

//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
const float maxAbsSquare = 4.0f;
const int maxIterations  = 100;

//[-------------------------------------------------------]
//[ Helper functions                                      ]
//[-------------------------------------------------------]
namespace exercise4b
{
    int computeIterations(float cx, float cy)
    {
        const std::complex<double> c(cx, cy);
        std::complex<double> z = 0;

        int iterations = 0;
        const float maxAbs = sqrt(maxAbsSquare);

        for (; iterations <= maxIterations && std::abs(z) <= maxAbs; iterations++) {
            z = z*z + c;
        }

        return iterations;
    }

    QColor chooseColor(int value, int maxValue)
    {
    	float p = (float)value/maxValue;
    	int i = (int)(299 * std::min(std::max(p, 0.0f), 1.0f));
    	int k = i / 60;
    	float m = 1.0f * (i % 60) / 59.0f;
    	switch (k)
    	{
    		case 0: return QColor(255, m*255, 0);
    		case 1: return QColor((1-m)*255, 255, 0);
    		case 2: return QColor(0, 255, m);
    		case 3: return QColor(m*255, (1-m)*255, 255);
    		case 4: return QColor((1-m)*255, 0, 255);
    	}

    	return QColor(0, 0, 0);
    }
}

using namespace exercise4b;

Exercise4b::Exercise4b(QWidget *parent) :
    ImageView(parent),
    mCurrentLevel(0),
    mCurrentDir(1)
{
    // Render mandelbrot set (initially)
    renderMandelbrot();

    // Initialize timer
    mTimer = new QTimer(this);
    connect(mTimer, SIGNAL(timeout()), this, SLOT(onTimer()));
    mTimer->start(500);
}

Exercise4b::~Exercise4b()
{
    // Destroy timer
    delete mTimer;
}

void Exercise4b::renderMandelbrot()
{
    // Create image
    int width = 800, height = 600;
    QPixmap mandelbrot(width, height);
    QPainter painter(&mandelbrot);

    // Draw image using a quadtree
    drawRecursive(painter, 0, 0, width, height, mCurrentLevel);
    // painter.setPen(QColor::fromRgbF(0,0,0));
    // QRect rect(0,0,50,50);
    // painter.fillRect(rect, QColor::fromRgbF(0,0,0));

    // Update image
    this->setImage(mandelbrot.toImage());
}

/**
*  @brief
*    Draw function recursively by using a quadtree-method
*/
void Exercise4b::drawRecursive(QPainter &painter, int x, int y, int w, int h, int level)
{
    if (level == 0) {
        QPoint origin(600, 250);
        float scaleX = 3.0f;
        float scaleY = 3.0f;

        int midX = x + w;//(x+w)/2;
        int midY = y + h;//(y+h)/2;

        float cx = ((float)(midX - origin.x()) / 800) * scaleX;
        float cy = ((float)(midY - origin.y()) / 600) * scaleY;

        // Compute number of iterations
        int iterationCount = computeIterations(cx, cy);

        // Get color
        QColor color = chooseColor(iterationCount, maxIterations);
        painter.setPen(color);

        // Draw rectangle
        QRect rect(x, y, w, h);
        painter.fillRect(rect, color);

        return;
    }

    int width = w/2;
    int height = h/2;

    drawRecursive(painter, x, y, width, height, level-1);
    drawRecursive(painter, x, y+height, width, h-height, level-1);
    drawRecursive(painter, x+width, y, w-width, height, level-1);
    drawRecursive(painter, x+width, y+height, w-width, h-height, level-1);
}

void Exercise4b::onTimer()
{
    // Loop level-of-detail
    mCurrentLevel = (++mCurrentLevel > 12) ? 0 : mCurrentLevel;

    // Render mandelbrot with current level
    renderMandelbrot();
}
